/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface EyeballsCoreInterface extends ethers.utils.Interface {
  functions: {
    "boostBalance(uint256)": FunctionFragment;
    "getBalance(uint256)": FunctionFragment;
    "payToView(address,uint256,uint256,uint256[8],uint256)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "boostBalance",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getBalance",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "payToView",
    values: [
      string,
      BigNumberish,
      BigNumberish,
      [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ],
      BigNumberish
    ]
  ): string;

  decodeFunctionResult(
    functionFragment: "boostBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getBalance", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "payToView", data: BytesLike): Result;

  events: {
    "BalanceUpdated(uint256,uint256)": EventFragment;
    "ViewedStatusUpdated(uint256,bool)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "BalanceUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ViewedStatusUpdated"): EventFragment;
}

export type BalanceUpdatedEvent = TypedEvent<
  [BigNumber, BigNumber] & { nullifierHash: BigNumber; newBalance: BigNumber }
>;

export type ViewedStatusUpdatedEvent = TypedEvent<
  [BigNumber, boolean] & { hash: BigNumber; status: boolean }
>;

export class EyeballsCore extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: EyeballsCoreInterface;

  functions: {
    boostBalance(
      nullifierHash: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getBalance(
      nullifierHash: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    payToView(
      signal: string,
      root: BigNumberish,
      nullifierHash: BigNumberish,
      proof: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ],
      referrerHash: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  boostBalance(
    nullifierHash: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getBalance(
    nullifierHash: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  payToView(
    signal: string,
    root: BigNumberish,
    nullifierHash: BigNumberish,
    proof: [
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ],
    referrerHash: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    boostBalance(
      nullifierHash: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    getBalance(
      nullifierHash: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    payToView(
      signal: string,
      root: BigNumberish,
      nullifierHash: BigNumberish,
      proof: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ],
      referrerHash: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "BalanceUpdated(uint256,uint256)"(
      nullifierHash?: BigNumberish | null,
      newBalance?: null
    ): TypedEventFilter<
      [BigNumber, BigNumber],
      { nullifierHash: BigNumber; newBalance: BigNumber }
    >;

    BalanceUpdated(
      nullifierHash?: BigNumberish | null,
      newBalance?: null
    ): TypedEventFilter<
      [BigNumber, BigNumber],
      { nullifierHash: BigNumber; newBalance: BigNumber }
    >;

    "ViewedStatusUpdated(uint256,bool)"(
      hash?: BigNumberish | null,
      status?: null
    ): TypedEventFilter<
      [BigNumber, boolean],
      { hash: BigNumber; status: boolean }
    >;

    ViewedStatusUpdated(
      hash?: BigNumberish | null,
      status?: null
    ): TypedEventFilter<
      [BigNumber, boolean],
      { hash: BigNumber; status: boolean }
    >;
  };

  estimateGas: {
    boostBalance(
      nullifierHash: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getBalance(
      nullifierHash: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    payToView(
      signal: string,
      root: BigNumberish,
      nullifierHash: BigNumberish,
      proof: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ],
      referrerHash: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    boostBalance(
      nullifierHash: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getBalance(
      nullifierHash: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    payToView(
      signal: string,
      root: BigNumberish,
      nullifierHash: BigNumberish,
      proof: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ],
      referrerHash: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
